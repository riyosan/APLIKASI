#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.19
#  in conjunction with Tcl version 8.6
#    May 03, 2019 03:39:04 AM +0700  platform: Windows NT

import sys

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import train_data_support, main, b2, new, pickle, os, numpy as np,re, pandas as pd
from tkinter import ttk, filedialog, messagebox
from tkinter.filedialog import askopenfilename, asksaveasfile, askdirectory
from sklearn.utils.multiclass import unique_labels
from collections import Counter

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    top = trainToplevel (root)
    train_data_support.init(root, top)
    root.mainloop()

w = None
def create_trainToplevel(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = tk.Toplevel (root)
    top = trainToplevel (w)
    train_data_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_trainToplevel():
    global w
    w.destroy()
    w = None

class trainToplevel:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#c5c8c9'  # X11 color: 'black'
        _fgcolor = '#c5c8c9'  # X11 color: 'black'
        _compcolor = '#718ec6' # X11 color: 'blue6'
        _ana1color = '#718ec6' # X11 color: 'blue6' 
        _ana2color = '#ececec' # Closest X11 color: 'gray92' 
        font10 = "-family {Segoe UI} -size 17 -weight bold -slant "  \
            "roman -underline 0 -overstrike 0"
        font14 = "TkDefaultFont"
        font9 = "-family {Segoe UI} -size 12 -weight bold -slant roman"  \
            " -underline 0 -overstrike 0"
        font5 = "-family {Segoe UI} -size 9 -weight bold -slant roman"  \
            " -underline 0 -overstrike 0"
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("1000x700+150+0")
        top.title("Prediksi Retinoblastoma")
        top.configure(background="#c5c8c9")
        top.configure(highlightbackground="#c5c8c9")
        top.configure(highlightcolor="black")

        self.Label1_6 = tk.Label(top)
        self.Label1_6.place(relx=0.33, rely=0.014, height=21, width=320)
        self.Label1_6.configure(activebackground="#f9f9f9")
        self.Label1_6.configure(activeforeground="black")
        self.Label1_6.configure(background="#c5c8c9")
        self.Label1_6.configure(disabledforeground="#a3a3a3")
        self.Label1_6.configure(font=font10)
        self.Label1_6.configure(foreground="#000000")
        self.Label1_6.configure(highlightbackground="#81a3a6")
        self.Label1_6.configure(highlightcolor="black")
        self.Label1_6.configure(text='''PREDIKSI RETINOBLASTOMA''')

        self.imgFolderText = tk.Text(top)
        self.imgFolderText.place(relx=0.022, rely=0.113, relheight=0.034
                , relwidth=0.25)
        self.imgFolderText.configure(background="white")
        self.imgFolderText.configure(font=font14)
        self.imgFolderText.configure(foreground="black")
        self.imgFolderText.configure(highlightbackground="#81a3a6")
        self.imgFolderText.configure(highlightcolor="black")
        self.imgFolderText.configure(insertbackground="black")
        self.imgFolderText.configure(selectbackground="#c4c4c4")
        self.imgFolderText.configure(selectforeground="black")
        self.imgFolderText.configure(width=224)
        self.imgFolderText.configure(wrap='word')
        self.imgFolderText.configure(state='disabled')

        self.Label1_7 = tk.Label(top)
        self.Label1_7.place(relx=0.015, rely=0.071, height=21, width=174)
        self.Label1_7.configure(activebackground="#f9f9f9")
        self.Label1_7.configure(activeforeground="black")
        self.Label1_7.configure(background="#c5c8c9")
        self.Label1_7.configure(disabledforeground="#a3a3a3")
        self.Label1_7.configure(font=font9)
        self.Label1_7.configure(foreground="#000000")
        self.Label1_7.configure(highlightbackground="#81a3a6")
        self.Label1_7.configure(highlightcolor="black")
        self.Label1_7.configure(text='''Masukkan Gambar''')

        def browse_folder(kelas,type,file):
            kelas.configure(state='normal')
            if (kelas.get("1.0","end-1c")!=""):
                kelas.delete("1.0","end-1c")
            if type=="load":
                if file=="folder":
                    name = askdirectory()
                    kelas.configure(state='normal')
                    kelas.insert(tk.INSERT,"folder:")        
                if file=="file":
                    file = [("Image File","*.jpg *.jpeg *.png")]
                    name = askopenfilename(filetypes=file)
            elif type=="save":
                file = [("Pickle File","*.pickle")]
                name = asksaveasfile(filetype=file,defaultextension=file)
                name=name.name
            print('Selected:', name)
            kelas.insert(tk.INSERT,name)
            kelas.configure(state='disabled')

        self.filebrowseButton1 = tk.Button(top, command=lambda: browse_folder(self.imgFolderText,"load","file"))
        self.filebrowseButton1.place(relx=0.29, rely=0.113, height=24, width=100)
        self.filebrowseButton1.configure(activebackground="#ececec")
        self.filebrowseButton1.configure(activeforeground="#000000")
        self.filebrowseButton1.configure(background="#81a3a6")
        self.filebrowseButton1.configure(disabledforeground="#a3a3a3")
        self.filebrowseButton1.configure(foreground="#000000")
        self.filebrowseButton1.configure(highlightbackground="#81a3a6")
        self.filebrowseButton1.configure(highlightcolor="black")
        self.filebrowseButton1.configure(pady="0")
        self.filebrowseButton1.configure(text='''Browse File''')

        # self.folderbrowseButton1 = tk.Button(top, command=lambda: browse_folder(self.imgFolderText,"load","folder"))
        # self.folderbrowseButton1.place(relx=0.29, rely=0.13, height=24, width=100)
        # self.folderbrowseButton1.configure(activebackground="#ececec")
        # self.folderbrowseButton1.configure(activeforeground="#000000")
        # self.folderbrowseButton1.configure(background="#81a3a6")
        # self.folderbrowseButton1.configure(disabledforeground="#a3a3a3")
        # self.folderbrowseButton1.configure(foreground="#000000")
        # self.folderbrowseButton1.configure(highlightbackground="#81a3a6")
        # self.folderbrowseButton1.configure(highlightcolor="black")
        # self.folderbrowseButton1.configure(pady="0")
        # self.folderbrowseButton1.configure(text='''Browse Folder''')

        self.thresText = tk.Text(top)
        self.thresText.place(relx=0.56, rely=0.09, height=21
                , width=30)
        self.thresText.configure(background="white")
        self.thresText.configure(font=font14)
        self.thresText.configure(foreground="black")
        self.thresText.configure(highlightbackground="#81a3a6")
        self.thresText.configure(highlightcolor="black")
        self.thresText.configure(insertbackground="black")
        self.thresText.configure(selectbackground="#c4c4c4")
        self.thresText.configure(selectforeground="black")
        self.thresText.configure(width=224)
        self.thresText.configure(wrap='word')
        self.thresText.insert(tk.INSERT,127)

        self.Label1_7 = tk.Label(top)
        self.Label1_7.place(relx=0.4, rely=0.09, height=21, width=150)
        self.Label1_7.configure(activebackground="#f9f9f9")
        self.Label1_7.configure(activeforeground="black")
        self.Label1_7.configure(background="#c5c8c9")
        self.Label1_7.configure(disabledforeground="#a3a3a3")
        self.Label1_7.configure(font=font9)
        self.Label1_7.configure(foreground="#000000")
        self.Label1_7.configure(highlightbackground="#81a3a6")
        self.Label1_7.configure(highlightcolor="black")
        self.Label1_7.configure(text='''Threshold Warna''')

        self.kernelText = tk.Text(top)
        self.kernelText.place(relx=0.56, rely=0.13, height=21, width=30)
        self.kernelText.configure(background="white")
        self.kernelText.configure(font=font14)
        self.kernelText.configure(foreground="black")
        self.kernelText.configure(highlightbackground="#81a3a6")
        self.kernelText.configure(highlightcolor="black")
        self.kernelText.configure(insertbackground="black")
        self.kernelText.configure(selectbackground="#c4c4c4")
        self.kernelText.configure(selectforeground="black")
        self.kernelText.configure(width=224)
        self.kernelText.configure(wrap='word')
        self.kernelText.insert(tk.INSERT,4)

        self.Label1_7 = tk.Label(top)
        self.Label1_7.place(relx=0.4, rely=0.13, height=21, width=150)
        self.Label1_7.configure(activebackground="#f9f9f9")
        self.Label1_7.configure(activeforeground="black")
        self.Label1_7.configure(background="#c5c8c9")
        self.Label1_7.configure(disabledforeground="#a3a3a3")
        self.Label1_7.configure(font=font9)
        self.Label1_7.configure(foreground="#000000")
        self.Label1_7.configure(highlightbackground="#81a3a6")
        self.Label1_7.configure(highlightcolor="black")
        self.Label1_7.configure(text='''N Kernel''')

        self.thres2Text = tk.Text(top)
        self.thres2Text.place(relx=0.56, rely=0.17, height=21
                , width=30)
        self.thres2Text.configure(background="white")
        self.thres2Text.configure(font=font14)
        self.thres2Text.configure(foreground="black")
        self.thres2Text.configure(highlightbackground="#81a3a6")
        self.thres2Text.configure(highlightcolor="black")
        self.thres2Text.configure(insertbackground="black")
        self.thres2Text.configure(selectbackground="#c4c4c4")
        self.thres2Text.configure(selectforeground="black")
        self.thres2Text.configure(width=224)
        self.thres2Text.configure(wrap='word')
        self.thres2Text.insert(tk.INSERT,100)

        self.thres3Text = tk.Text(top)
        self.thres3Text.place(relx=0.595, rely=0.17, height=21
                , width=30)
        self.thres3Text.configure(background="white")
        self.thres3Text.configure(font=font14)
        self.thres3Text.configure(foreground="black")
        self.thres3Text.configure(highlightbackground="#81a3a6")
        self.thres3Text.configure(highlightcolor="black")
        self.thres3Text.configure(insertbackground="black")
        self.thres3Text.configure(selectbackground="#c4c4c4")
        self.thres3Text.configure(selectforeground="black")
        self.thres3Text.configure(width=224)
        self.thres3Text.configure(wrap='word')
        self.thres3Text.insert(tk.INSERT,200)

        self.Label1_7 = tk.Label(top)
        self.Label1_7.place(relx=0.4, rely=0.17, height=21, width=150)
        self.Label1_7.configure(activebackground="#f9f9f9")
        self.Label1_7.configure(activeforeground="black")
        self.Label1_7.configure(background="#c5c8c9")
        self.Label1_7.configure(disabledforeground="#a3a3a3")
        self.Label1_7.configure(font=font9)
        self.Label1_7.configure(foreground="#000000")
        self.Label1_7.configure(highlightbackground="#81a3a6")
        self.Label1_7.configure(highlightcolor="black")
        self.Label1_7.configure(text='''Edge Threshold''')

        self.Label1_23 = tk.Label(top)
        self.Label1_23.place(relx=0.63, rely=0.09, height=21, width=144)
        self.Label1_23.configure(activebackground="#f9f9f9")
        self.Label1_23.configure(activeforeground="black")
        self.Label1_23.configure(background="#c5c8c9")
        self.Label1_23.configure(disabledforeground="#a3a3a3")
        self.Label1_23.configure(font=font10)
        self.Label1_23.configure(foreground="#000000")
        self.Label1_23.configure(highlightbackground="#81a3a6")
        self.Label1_23.configure(highlightcolor="black")
        self.Label1_23.configure(text='''Hasil Prediksi''')

        self.predResText = tk.Text(top)
        self.predResText.place(relx=0.63, rely=0.13, height=70
                , width=200)
        self.predResText.configure(background="white")
        self.predResText.configure(font=font5)
        self.predResText.configure(foreground="black")
        self.predResText.configure(highlightbackground="#81a3a6")
        self.predResText.configure(highlightcolor="black")
        self.predResText.configure(insertbackground="black")
        self.predResText.configure(selectbackground="#c4c4c4")
        self.predResText.configure(selectforeground="black")
        self.predResText.configure(width=224)
        self.predResText.configure(wrap='word')
        self.predResText.configure(state='disabled')

        self.prosButton = tk.Button(top,command=self.proses)
        self.prosButton.place(relx=0.022, rely=0.19, height=24, width=87)
        self.prosButton.configure(activebackground="#ececec")
        self.prosButton.configure(activeforeground="#000000")
        self.prosButton.configure(background="#81a3a6")
        self.prosButton.configure(disabledforeground="#a3a3a3")
        self.prosButton.configure(foreground="#000000")
        self.prosButton.configure(highlightbackground="#81a3a6")
        self.prosButton.configure(highlightcolor="black")
        self.prosButton.configure(pady="0")
        self.prosButton.configure(text='''Proses Data''')

        self.predButton = tk.Button(top,command=self.pred)
        self.predButton.place(relx=0.14, rely=0.19, height=24, width=87)
        self.predButton.configure(activebackground="#ececec")
        self.predButton.configure(activeforeground="#000000")
        self.predButton.configure(background="#81a3a6")
        self.predButton.configure(disabledforeground="#a3a3a3")
        self.predButton.configure(foreground="#000000")
        self.predButton.configure(highlightbackground="#81a3a6")
        self.predButton.configure(highlightcolor="black")
        self.predButton.configure(pady="0")
        self.predButton.configure(text='''Prediksi Data''')

        self.Label1_7 = tk.Label(top)
        self.Label1_7.place(relx=0.42, rely=0.23, height=21, width=150)
        self.Label1_7.configure(activebackground="#f9f9f9")
        self.Label1_7.configure(activeforeground="black")
        self.Label1_7.configure(background="#c5c8c9")
        self.Label1_7.configure(disabledforeground="#a3a3a3")
        self.Label1_7.configure(font=font9)
        self.Label1_7.configure(foreground="#000000")
        self.Label1_7.configure(highlightbackground="#81a3a6")
        self.Label1_7.configure(highlightcolor="black")
        self.Label1_7.configure(text='''PREPROCESSING''')

        self.Label1_7 = tk.Label(top)
        self.Label1_7.place(relx=0.07, rely=0.255, height=21, width=170)
        self.Label1_7.configure(activebackground="#f9f9f9")
        self.Label1_7.configure(activeforeground="black")
        self.Label1_7.configure(background="#c5c8c9")
        self.Label1_7.configure(disabledforeground="#a3a3a3")
        self.Label1_7.configure(font=font9)
        self.Label1_7.configure(foreground="#000000")
        self.Label1_7.configure(highlightbackground="#81a3a6")
        self.Label1_7.configure(highlightcolor="black")
        self.Label1_7.configure(text='''Gambar Asli''')

        self.asliCanvas = tk.Canvas(top)
        self.asliCanvas.place(relx=0.07, rely=0.29, relheight=0.19
                , relwidth=0.16)
        self.asliCanvas.configure(background="#81a3a6")
        self.asliCanvas.configure(borderwidth="2")
        self.asliCanvas.configure(highlightbackground="#81a3a6")
        self.asliCanvas.configure(highlightcolor="black")
        self.asliCanvas.configure(insertbackground="black")
        self.asliCanvas.configure(relief='ridge')
        self.asliCanvas.configure(selectbackground="#c4c4c4")
        self.asliCanvas.configure(selectforeground="black")
        self.asliCanvas.configure(width=243)

        self.Label1_7 = tk.Label(top)
        self.Label1_7.place(relx=0.42, rely=0.255, height=21, width=150)
        self.Label1_7.configure(activebackground="#f9f9f9")
        self.Label1_7.configure(activeforeground="black")
        self.Label1_7.configure(background="#c5c8c9")
        self.Label1_7.configure(disabledforeground="#a3a3a3")
        self.Label1_7.configure(font=font9)
        self.Label1_7.configure(foreground="#000000")
        self.Label1_7.configure(highlightbackground="#81a3a6")
        self.Label1_7.configure(highlightcolor="black")
        self.Label1_7.configure(text='''Grayscale''')

        self.grayCanvas = tk.Canvas(top)
        self.grayCanvas.place(relx=0.42, rely=0.29, relheight=0.19
                , relwidth=0.16)
        self.grayCanvas.configure(background="#81a3a6")
        self.grayCanvas.configure(borderwidth="2")
        self.grayCanvas.configure(highlightbackground="#81a3a6")
        self.grayCanvas.configure(highlightcolor="black")
        self.grayCanvas.configure(insertbackground="black")
        self.grayCanvas.configure(relief='ridge')
        self.grayCanvas.configure(selectbackground="#c4c4c4")
        self.grayCanvas.configure(selectforeground="black")
        self.grayCanvas.configure(width=243)

        self.Label1_7 = tk.Label(top)
        self.Label1_7.place(relx=0.75, rely=0.255, height=21, width=200)
        self.Label1_7.configure(activebackground="#81a3a6")
        self.Label1_7.configure(activeforeground="black")
        self.Label1_7.configure(background="#c5c8c9")
        self.Label1_7.configure(disabledforeground="#a3a3a3")
        self.Label1_7.configure(font=font9)
        self.Label1_7.configure(foreground="#000000")
        self.Label1_7.configure(highlightbackground="#81a3a6")
        self.Label1_7.configure(highlightcolor="black")
        self.Label1_7.configure(text='''Morphological Close Ops.''')

        self.closeCanvas = tk.Canvas(top)
        self.closeCanvas.place(relx=0.77, rely=0.29, relheight=0.19
                , relwidth=0.16)
        self.closeCanvas.configure(background="#81a3a6")
        self.closeCanvas.configure(borderwidth="2")
        self.closeCanvas.configure(highlightbackground="#81a3a6")
        self.closeCanvas.configure(highlightcolor="black")
        self.closeCanvas.configure(insertbackground="black")
        self.closeCanvas.configure(relief='ridge')
        self.closeCanvas.configure(selectbackground="#c4c4c4")
        self.closeCanvas.configure(selectforeground="black")
        self.closeCanvas.configure(width=243)

        self.Label1_7 = tk.Label(top)
        self.Label1_7.place(relx=0.4, rely=0.5, height=21, width=200)
        self.Label1_7.configure(activebackground="#f9f9f9")
        self.Label1_7.configure(activeforeground="black")
        self.Label1_7.configure(background="#c5c8c9")
        self.Label1_7.configure(disabledforeground="#a3a3a3")
        self.Label1_7.configure(font=font9)
        self.Label1_7.configure(foreground="#000000")
        self.Label1_7.configure(highlightbackground="#81a3a6")
        self.Label1_7.configure(highlightcolor="black")
        self.Label1_7.configure(text='''OPTIC DISC ELIMINATION''')

        self.Label1_7 = tk.Label(top)
        self.Label1_7.place(relx=0.05, rely=0.53, height=21, width=200)
        self.Label1_7.configure(activebackground="#f9f9f9")
        self.Label1_7.configure(activeforeground="black")
        self.Label1_7.configure(background="#c5c8c9")
        self.Label1_7.configure(disabledforeground="#a3a3a3")
        self.Label1_7.configure(font=font9)
        self.Label1_7.configure(foreground="#000000")
        self.Label1_7.configure(highlightbackground="#81a3a6")
        self.Label1_7.configure(highlightcolor="black")
        self.Label1_7.configure(text='''Thresholding''')

        self.threshCanvas = tk.Canvas(top)
        self.threshCanvas.place(relx=0.07, rely=0.56, relheight=0.19
                , relwidth=0.16)
        self.threshCanvas.configure(background="#81a3a6")
        self.threshCanvas.configure(borderwidth="2")
        self.threshCanvas.configure(highlightbackground="#81a3a6")
        self.threshCanvas.configure(highlightcolor="black")
        self.threshCanvas.configure(insertbackground="black")
        self.threshCanvas.configure(relief='ridge')
        self.threshCanvas.configure(selectbackground="#c4c4c4")
        self.threshCanvas.configure(selectforeground="black")
        self.threshCanvas.configure(width=243)

        self.Label1_7 = tk.Label(top)
        self.Label1_7.place(relx=0.4, rely=0.53, height=21, width=200)
        self.Label1_7.configure(activebackground="#f9f9f9")
        self.Label1_7.configure(activeforeground="black")
        self.Label1_7.configure(background="#c5c8c9")
        self.Label1_7.configure(disabledforeground="#a3a3a3")
        self.Label1_7.configure(font=font9)
        self.Label1_7.configure(foreground="#000000")
        self.Label1_7.configure(highlightbackground="#81a3a6")
        self.Label1_7.configure(highlightcolor="black")
        self.Label1_7.configure(text='''Erosion''')

        self.erodeCanvas = tk.Canvas(top)
        self.erodeCanvas.place(relx=0.42, rely=0.56, relheight=0.19
                , relwidth=0.16)
        self.erodeCanvas.configure(background="#81a3a6")
        self.erodeCanvas.configure(borderwidth="2")
        self.erodeCanvas.configure(highlightbackground="#81a3a6")
        self.erodeCanvas.configure(highlightcolor="black")
        self.erodeCanvas.configure(insertbackground="black")
        self.erodeCanvas.configure(relief='ridge')
        self.erodeCanvas.configure(selectbackground="#c4c4c4")
        self.erodeCanvas.configure(selectforeground="black")
        self.erodeCanvas.configure(width=243)

        self.Label1_7 = tk.Label(top)
        self.Label1_7.place(relx=0.75, rely=0.53, height=21, width=200)
        self.Label1_7.configure(activebackground="#f9f9f9")
        self.Label1_7.configure(activeforeground="black")
        self.Label1_7.configure(background="#c5c8c9")
        self.Label1_7.configure(disabledforeground="#a3a3a3")
        self.Label1_7.configure(font=font9)
        self.Label1_7.configure(foreground="#000000")
        self.Label1_7.configure(highlightbackground="#81a3a6")
        self.Label1_7.configure(highlightcolor="black")
        self.Label1_7.configure(text='''Inversion''')

        self.invCanvas = tk.Canvas(top)
        self.invCanvas.place(relx=0.77, rely=0.56, relheight=0.19
                , relwidth=0.16)
        self.invCanvas.configure(background="#81a3a6")
        self.invCanvas.configure(borderwidth="2")
        self.invCanvas.configure(highlightbackground="#81a3a6")
        self.invCanvas.configure(highlightcolor="black")
        self.invCanvas.configure(insertbackground="black")
        self.invCanvas.configure(relief='ridge')
        self.invCanvas.configure(selectbackground="#c4c4c4")
        self.invCanvas.configure(selectforeground="black")
        self.invCanvas.configure(width=243)

        self.Label1_7 = tk.Label(top)
        self.Label1_7.place(relx=0.4, rely=0.76, height=21, width=200)
        self.Label1_7.configure(activebackground="#f9f9f9")
        self.Label1_7.configure(activeforeground="black")
        self.Label1_7.configure(background="#c5c8c9")
        self.Label1_7.configure(disabledforeground="#a3a3a3")
        self.Label1_7.configure(font=font9)
        self.Label1_7.configure(foreground="#000000")
        self.Label1_7.configure(highlightbackground="#81a3a6")
        self.Label1_7.configure(highlightcolor="black")
        self.Label1_7.configure(text='''Edge Detection''')

        self.edgeCanvas = tk.Canvas(top)
        self.edgeCanvas.place(relx=0.42, rely=0.79, relheight=0.19
                , relwidth=0.16)
        self.edgeCanvas.configure(background="#81a3a6")
        self.edgeCanvas.configure(borderwidth="2")
        self.edgeCanvas.configure(highlightbackground="#81a3a6")
        self.edgeCanvas.configure(highlightcolor="black")
        self.edgeCanvas.configure(insertbackground="black")
        self.edgeCanvas.configure(relief='ridge')
        self.edgeCanvas.configure(selectbackground="#c4c4c4")
        self.edgeCanvas.configure(selectforeground="black")
        self.edgeCanvas.configure(width=243)

        def home_show():
            root.destroy()
            main.vp_start_gui()
        self.homeButton = tk.Button(top, command=home_show)
        self.homeButton.place(relx=0.8, rely=0.05, height=24, width=87)
        self.homeButton.configure(activebackground="#ececec")
        self.homeButton.configure(activeforeground="#000000")
        self.homeButton.configure(background="#81a3a6")
        self.homeButton.configure(disabledforeground="#a3a3a3")
        self.homeButton.configure(foreground="#000000")
        self.homeButton.configure(highlightbackground="#81a3a6")
        self.homeButton.configure(highlightcolor="black")
        self.homeButton.configure(pady="0")
        self.homeButton.configure(text='''Halaman Awal''')

        self.exitButton = tk.Button(top,command=self.Exit)
        self.exitButton.place(relx=0.9, rely=0.05, height=24, width=87)
        self.exitButton.configure(activebackground="#ececec")
        self.exitButton.configure(activeforeground="#000000")
        self.exitButton.configure(background="#81a3a6")
        self.exitButton.configure(disabledforeground="#a3a3a3")
        self.exitButton.configure(foreground="#000000")
        self.exitButton.configure(highlightbackground="#81a3a6")
        self.exitButton.configure(highlightcolor="black")
        self.exitButton.configure(pady="0")
        self.exitButton.configure(text='''Keluar''')

    def Exit(self):
        msg = messagebox.askyesno("Klasifikasi Gambar", "Apa Anda Yakin Ingin Keluar?")
        if(msg):
            exit()

    def proses(self):
        file = self.imgFolderText.get('1.0','end-1c')
        thresh = int(self.thresText.get('1.0','end-1c'))
        nkernel = int(self.kernelText.get('1.0','end-1c'))
        th1 = int(self.thres2Text.get('1.0','end-1c'))
        th2 = int(self.thres3Text.get('1.0','end-1c'))
        imgs = new.get_image(file,thresh,nkernel,th1,th2)
        new.place_image(imgs.img,self.asliCanvas,0.07, 0.29, 0.19, 0.16)
        new.place_image(imgs.imgray,self.grayCanvas,0.42, 0.29, 0.19, 0.16)
        new.place_image(imgs.immorph,self.closeCanvas,0.77, 0.29, 0.19, 0.16)
        new.place_image(imgs.imbin,self.threshCanvas,0.07, 0.56, 0.19, 0.16)
        new.place_image(imgs.imero,self.erodeCanvas,0.42, 0.56, 0.19, 0.16)
        new.place_image(imgs.iminv,self.invCanvas,0.77, 0.56, 0.19, 0.16)
        new.place_image(imgs.imedge,self.edgeCanvas,0.42, 0.81, 0.19, 0.16)
        print([thresh,nkernel,th1,th2])

    def pred(self):
        file = self.imgFolderText.get('1.0','end-1c')
        thresh = int(self.thresText.get('1.0','end-1c'))
        nkernel = int(self.kernelText.get('1.0','end-1c'))
        th1 = int(self.thres2Text.get('1.0','end-1c'))
        th2 = int(self.thres3Text.get('1.0','end-1c'))
        img = b2.open_img(file,thresh,nkernel,th1,th2)
        pred = b2.prediksi(img)[0]
        label = pickle.load(open(os.path.dirname(os.path.realpath(__file__))+"/db/"+'label.pickle',"rb"))
        print(label[np.where(pred==np.amax(pred))])
        self.predResText.configure(state='normal')
        self.predResText.delete("1.0","end-1c")
        self.predResText.delete(1.0,tk.END)
        for i,j in zip(label,pred):
            self.predResText.insert(tk.INSERT,"Peluang %s: %f\n"%(i,round(j,4)))
        self.predResText.insert(tk.INSERT,"Kesimpulan: %s\n"%label[np.where(pred==np.amax(pred))][0])
        self.predResText.configure(state='disabled')


# The following code is added to facilitate the Scrolled widgets you specified.
class AutoScroll(object):
    '''Configure the scrollbars for a widget.'''

    def __init__(self, master):
        #  Rozen. Added the try-except clauses so that this class
        #  could be used for scrolled entry widget for which vertical
        #  scrolling is not supported. 5/7/14.
        try:
            vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
        except:
            pass
        hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)

        #self.configure(yscrollcommand=_autoscroll(vsb),
        #    xscrollcommand=_autoscroll(hsb))
        try:
            self.configure(yscrollcommand=self._autoscroll(vsb))
        except:
            pass
        self.configure(xscrollcommand=self._autoscroll(hsb))

        self.grid(column=0, row=0, sticky='nsew')
        try:
            vsb.grid(column=1, row=0, sticky='ns')
        except:
            pass
        hsb.grid(column=0, row=1, sticky='ew')

        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)

        # Copy geometry methods of master  (taken from ScrolledText.py)
        if py3:
            methods = tk.Pack.__dict__.keys() | tk.Grid.__dict__.keys() \
                  | tk.Place.__dict__.keys()
        else:
            methods = tk.Pack.__dict__.keys() + tk.Grid.__dict__.keys() \
                  + tk.Place.__dict__.keys()

        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))

    @staticmethod
    def _autoscroll(sbar):
        '''Hide and show scrollbar as needed.'''
        def wrapped(first, last):
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            else:
                sbar.grid()
            sbar.set(first, last)
        return wrapped

    def __str__(self):
        return str(self.master)

def _create_container(func):
    '''Creates a ttk Frame with a given master, and use this new frame to
    place the scrollbars and the widget.'''
    def wrapped(cls, master, **kw):
        container = ttk.Frame(master)
        container.bind('<Enter>', lambda e: _bound_to_mousewheel(e, container))
        container.bind('<Leave>', lambda e: _unbound_to_mousewheel(e, container))
        return func(cls, container, **kw)
    return wrapped

class ScrolledText(AutoScroll, tk.Text):
    '''A standard Tkinter Text widget with scrollbars that will
    automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        tk.Text.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)

import platform
def _bound_to_mousewheel(event, widget):
    child = widget.winfo_children()[0]
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        child.bind_all('<MouseWheel>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-MouseWheel>', lambda e: _on_shiftmouse(e, child))
    else:
        child.bind_all('<Button-4>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Button-5>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-Button-4>', lambda e: _on_shiftmouse(e, child))
        child.bind_all('<Shift-Button-5>', lambda e: _on_shiftmouse(e, child))

def _unbound_to_mousewheel(event, widget):
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        widget.unbind_all('<MouseWheel>')
        widget.unbind_all('<Shift-MouseWheel>')
    else:
        widget.unbind_all('<Button-4>')
        widget.unbind_all('<Button-5>')
        widget.unbind_all('<Shift-Button-4>')
        widget.unbind_all('<Shift-Button-5>')

def _on_mousewheel(event, widget):
    if platform.system() == 'Windows':
        widget.yview_scroll(-1*int(event.delta/120),'units')
    elif platform.system() == 'Darwin':
        widget.yview_scroll(-1*int(event.delta),'units')
    else:
        if event.num == 4:
            widget.yview_scroll(-1, 'units')
        elif event.num == 5:
            widget.yview_scroll(1, 'units')

def _on_shiftmouse(event, widget):
    if platform.system() == 'Windows':
        widget.xview_scroll(-1*int(event.delta/120), 'units')
    elif platform.system() == 'Darwin':
        widget.xview_scroll(-1*int(event.delta), 'units')
    else:
        if event.num == 4:
            widget.xview_scroll(-1, 'units')
        elif event.num == 5:
            widget.xview_scroll(1, 'units')

if __name__ == '__main__':
    vp_start_gui()





