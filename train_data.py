#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.19
#  in conjunction with Tcl version 8.6
#    May 03, 2019 03:39:04 AM +0700  platform: Windows NT

import sys

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import train_data_support, main, b2, new, pickle, os, numpy as np
from tkinter import ttk, filedialog, messagebox
from tkinter.filedialog import askopenfilename, asksaveasfile, askdirectory
from sklearn.utils.multiclass import unique_labels
from collections import Counter

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    top = trainToplevel (root)
    train_data_support.init(root, top)
    root.mainloop()

w = None
def create_trainToplevel(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = tk.Toplevel (root)
    top = trainToplevel (w)
    train_data_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_trainToplevel():
    global w
    w.destroy()
    w = None

class trainToplevel:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#FFFFFF'  # X11 color: 'black'
        _fgcolor = '#FFFFFF'  # X11 color: 'black'
        _compcolor = '#718ec6' # X11 color: 'blue6'
        _ana1color = '#718ec6' # X11 color: 'blue6' 
        _ana2color = '#ececec' # Closest X11 color: 'gray92' 
        font10 = "-family {Segoe UI} -size 17 -weight bold -slant "  \
            "roman -underline 0 -overstrike 0"
        font14 = "TkDefaultFont"
        font9 = "-family {Segoe UI} -size 12 -weight bold -slant roman"  \
            " -underline 0 -overstrike 0"
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("705x705+450+0")
        top.title("Latih Data")
        top.configure(background="#c5c8c9")
        top.configure(highlightbackground="#ffb3ab")
        top.configure(highlightcolor="black")

        self.Label1_6 = tk.Label(top)
        self.Label1_6.place(relx=0.35, rely=0.014, height=21, width=164)
        self.Label1_6.configure(activebackground="#f9f9f9")
        self.Label1_6.configure(activeforeground="black")
        self.Label1_6.configure(background="#c5c8c9")
        self.Label1_6.configure(disabledforeground="#a3a3a3")
        self.Label1_6.configure(font=font10)
        self.Label1_6.configure(foreground="#000000")
        self.Label1_6.configure(highlightbackground="#ffb3ab")
        self.Label1_6.configure(highlightcolor="black")
        self.Label1_6.configure(text='''LATIH DATA''')
        self.Label1_6.configure(width=200)

        self.Label1_12 = tk.Label(top)
        self.Label1_12.place(relx=0.022, rely=0.1, height=21, width=250)
        self.Label1_12.configure(activebackground="#f9f9f9")
        self.Label1_12.configure(activeforeground="black")
        self.Label1_12.configure(background="#c5c8c9")
        self.Label1_12.configure(disabledforeground="#a3a3a3")
        self.Label1_12.configure(font=font9)
        self.Label1_12.configure(foreground="#000000")
        self.Label1_12.configure(highlightbackground="#ffb3ab")
        self.Label1_12.configure(highlightcolor="black")
        self.Label1_12.configure(text='''Pengaturan Parameter''')
     
        self.lrText = tk.Text(top)
        self.lrText.place(relx=0.20, rely=0.15, relheight=0.034
                , relwidth=0.05)
        self.lrText.configure(background="white")
        self.lrText.configure(font="TkTextFont")
        self.lrText.configure(foreground="black")
        self.lrText.configure(highlightbackground="#ffb3ab")
        self.lrText.configure(highlightcolor="black")
        self.lrText.configure(insertbackground="black")
        self.lrText.configure(selectbackground="#c4c4c4")
        self.lrText.configure(selectforeground="black")
        self.lrText.configure(width=64)
        self.lrText.configure(wrap='word')
        self.lrText.insert(tk.INSERT,0.1)

        self.Label1_4 = tk.Label(top)
        self.Label1_4.place(relx=0.022, rely=0.15, height=21, width=120)
        self.Label1_4.configure(activebackground="#f9f9f9")
        self.Label1_4.configure(activeforeground="black")
        self.Label1_4.configure(background="#c5c8c9")
        self.Label1_4.configure(disabledforeground="#a3a3a3")
        self.Label1_4.configure(font=font9)
        self.Label1_4.configure(foreground="#000000")
        self.Label1_4.configure(highlightbackground="#ffb3ab")
        self.Label1_4.configure(highlightcolor="black")
        self.Label1_4.configure(text='''Learning Rate''')

        self.batchText = tk.Text(top)
        self.batchText.place(relx=0.36, rely=0.15, relheight=0.034
                , relwidth=0.05)
        self.batchText.configure(background="white")
        self.batchText.configure(font="TkTextFont")
        self.batchText.configure(foreground="black")
        self.batchText.configure(highlightbackground="#ffb3ab")
        self.batchText.configure(highlightcolor="black")
        self.batchText.configure(insertbackground="black")
        self.batchText.configure(selectbackground="#c4c4c4")
        self.batchText.configure(selectforeground="black")
        self.batchText.configure(width=64)
        self.batchText.configure(wrap='word')
        self.batchText.insert(tk.INSERT,10)

        self.Label1_4 = tk.Label(top)
        self.Label1_4.place(relx=0.27, rely=0.15, height=21, width=43)
        self.Label1_4.configure(activebackground="#f9f9f9")
        self.Label1_4.configure(activeforeground="black")
        self.Label1_4.configure(background="#c5c8c9")
        self.Label1_4.configure(disabledforeground="#a3a3a3")
        self.Label1_4.configure(font=font9)
        self.Label1_4.configure(foreground="#000000")
        self.Label1_4.configure(highlightbackground="#ffb3ab")
        self.Label1_4.configure(highlightcolor="black")
        self.Label1_4.configure(text='''Batch''')

        self.epochText = tk.Text(top)
        self.epochText.place(relx=0.51, rely=0.15, relheight=0.034
                , relwidth=0.05)
        self.epochText.configure(background="white")
        self.epochText.configure(font="TkTextFont")
        self.epochText.configure(foreground="black")
        self.epochText.configure(highlightbackground="#ffb3ab")
        self.epochText.configure(highlightcolor="black")
        self.epochText.configure(insertbackground="black")
        self.epochText.configure(selectbackground="#c4c4c4")
        self.epochText.configure(selectforeground="black")
        self.epochText.configure(width=64)
        self.epochText.configure(wrap='word')
        self.epochText.insert(tk.INSERT,5)

        self.Label1_4 = tk.Label(top)
        self.Label1_4.place(relx=0.42, rely=0.15, height=21, width=45)
        self.Label1_4.configure(activebackground="#f9f9f9")
        self.Label1_4.configure(activeforeground="black")
        self.Label1_4.configure(background="#c5c8c9")
        self.Label1_4.configure(disabledforeground="#a3a3a3")
        self.Label1_4.configure(font=font9)
        self.Label1_4.configure(foreground="#000000")
        self.Label1_4.configure(highlightbackground="#ffb3ab")
        self.Label1_4.configure(highlightcolor="black")
        self.Label1_4.configure(text='''Epoch''')

        self.stepText = tk.Text(top)
        self.stepText.place(relx=0.72, rely=0.15, relheight=0.034
                , relwidth=0.05)
        self.stepText.configure(background="white")
        self.stepText.configure(font="TkTextFont")
        self.stepText.configure(foreground="black")
        self.stepText.configure(highlightbackground="#ffb3ab")
        self.stepText.configure(highlightcolor="black")
        self.stepText.configure(insertbackground="black")
        self.stepText.configure(selectbackground="#c4c4c4")
        self.stepText.configure(selectforeground="black")
        self.stepText.configure(width=64)
        self.stepText.configure(wrap='word')
        self.stepText.insert(tk.INSERT,0)

        self.Label1_4 = tk.Label(top)
        self.Label1_4.place(relx=0.58, rely=0.15, height=21, width=90)
        self.Label1_4.configure(activebackground="#f9f9f9")
        self.Label1_4.configure(activeforeground="black")
        self.Label1_4.configure(background="#c5c8c9")
        self.Label1_4.configure(disabledforeground="#a3a3a3")
        self.Label1_4.configure(font=font9)
        self.Label1_4.configure(foreground="#000000")
        self.Label1_4.configure(highlightbackground="#ffb3ab")
        self.Label1_4.configure(highlightcolor="black")
        self.Label1_4.configure(text='''Step/Epoch''')

        self.trainButton = tk.Button(top,command=self.run_caps)
        self.trainButton.place(relx=0.022, rely=0.20, height=24, width=87)
        self.trainButton.configure(activebackground="#ececec")
        self.trainButton.configure(activeforeground="#000000")
        self.trainButton.configure(background="#81a3a6")
        self.trainButton.configure(disabledforeground="#a3a3a3")
        self.trainButton.configure(foreground="#000000")
        self.trainButton.configure(highlightbackground="#ffb3ab")
        self.trainButton.configure(highlightcolor="black")
        self.trainButton.configure(pady="0")
        self.trainButton.configure(text='''Latih Data''')

        self.Label1_3 = tk.Label(top)
        self.Label1_3.place(relx=0.36, rely=0.30, height=21, width=210)
        self.Label1_3.configure(activebackground="#f9f9f9")
        self.Label1_3.configure(activeforeground="black")
        self.Label1_3.configure(background="#c5c8c9")
        self.Label1_3.configure(disabledforeground="#a3a3a3")
        self.Label1_3.configure(font=font9)
        self.Label1_3.configure(foreground="#000000")
        self.Label1_3.configure(highlightbackground="#ffb3ab")
        self.Label1_3.configure(highlightcolor="black")
        self.Label1_3.configure(text='''HASIL PELATIHAN DATA''')

        self.Label1_9 = tk.Label(top)
        self.Label1_9.place(relx=0.18, rely=0.37, height=21, width=134)
        self.Label1_9.configure(activebackground="#f9f9f9")
        self.Label1_9.configure(activeforeground="black")
        self.Label1_9.configure(background="#c5c8c9")
        self.Label1_9.configure(disabledforeground="#a3a3a3")
        self.Label1_9.configure(font=font9)
        self.Label1_9.configure(foreground="#000000")
        self.Label1_9.configure(highlightbackground="#ffb3ab")
        self.Label1_9.configure(highlightcolor="black")
        self.Label1_9.configure(text='''Confusion Matrix''')

        self.confMatCanvas = tk.Canvas(top)
        self.confMatCanvas.place(relx=0.07, rely=0.47, relheight=0.4
                , relwidth=0.4)
        self.confMatCanvas.configure(background="white")
        self.confMatCanvas.configure(borderwidth="2")
        self.confMatCanvas.configure(highlightbackground="white")
        self.confMatCanvas.configure(highlightcolor="black")
        self.confMatCanvas.configure(insertbackground="black")
        self.confMatCanvas.configure(relief='ridge')
        self.confMatCanvas.configure(selectbackground="#c4c4c4")
        self.confMatCanvas.configure(selectforeground="black")
        self.confMatCanvas.configure(width=243)

        self.Labelframe1_10 = tk.LabelFrame(self.confMatCanvas)
        self.Labelframe1_10.place(relx=2.058, rely=0.282, relheight=0.352
                , relwidth=0.617)
        self.Labelframe1_10.configure(relief='groove')
        self.Labelframe1_10.configure(foreground="black")
        self.Labelframe1_10.configure(text='''Labelframe''')
        self.Labelframe1_10.configure(background="#ffb3ab")
        self.Labelframe1_10.configure(highlightbackground="#ffb3ab")
        self.Labelframe1_10.configure(highlightcolor="black")
        self.Labelframe1_10.configure(width=150)


        self.Label1_4 = tk.Label(top)
        self.Label1_4.place(relx=0.57, rely=0.37, height=21, width=214)
        self.Label1_4.configure(activebackground="#f9f9f9")
        self.Label1_4.configure(activeforeground="black")
        self.Label1_4.configure(background="#c5c8c9")
        self.Label1_4.configure(disabledforeground="#a3a3a3")
        self.Label1_4.configure(font=font9)
        self.Label1_4.configure(foreground="#000000")
        self.Label1_4.configure(highlightbackground="#ffb3ab")
        self.Label1_4.configure(highlightcolor="black")
        self.Label1_4.configure(text='''Confusion Matrix Summary''')

        self.confMatScrolledtext = ScrolledText(top)
        self.confMatScrolledtext.place(relx=0.53, rely=0.47
                , relheight=0.4, relwidth=0.40)
        self.confMatScrolledtext.configure(background="white")
        self.confMatScrolledtext.configure(font="TkTextFont")
        self.confMatScrolledtext.configure(foreground="black")
        self.confMatScrolledtext.configure(highlightbackground="#ffb3ab")
        self.confMatScrolledtext.configure(highlightcolor="black")
        self.confMatScrolledtext.configure(insertbackground="black")
        self.confMatScrolledtext.configure(insertborderwidth="3")
        self.confMatScrolledtext.configure(selectbackground="#c4c4c4")
        self.confMatScrolledtext.configure(selectforeground="black")
        self.confMatScrolledtext.configure(width=10)
        self.confMatScrolledtext.configure(wrap='none')

        def home_show():
            root.destroy()
            main.vp_start_gui()
        self.homeButton = tk.Button(top, command=home_show)
        self.homeButton.place(relx=0.70, rely=0.02, height=24, width=87)
        self.homeButton.configure(activebackground="#ececec")
        self.homeButton.configure(activeforeground="#000000")
        self.homeButton.configure(background="#81a3a6")
        self.homeButton.configure(disabledforeground="#a3a3a3")
        self.homeButton.configure(foreground="#000000")
        self.homeButton.configure(highlightbackground="#ffb3ab")
        self.homeButton.configure(highlightcolor="black")
        self.homeButton.configure(pady="0")
        self.homeButton.configure(text='''Halaman Awal''')

        self.exitButton = tk.Button(top,command=self.Exit)
        self.exitButton.place(relx=0.85, rely=0.02, height=24, width=87)
        self.exitButton.configure(activebackground="#ececec")
        self.exitButton.configure(activeforeground="#000000")
        self.exitButton.configure(background="#81a3a6")
        self.exitButton.configure(disabledforeground="#a3a3a3")
        self.exitButton.configure(foreground="#000000")
        self.exitButton.configure(highlightbackground="#ffb3ab")
        self.exitButton.configure(highlightcolor="black")
        self.exitButton.configure(pady="0")
        self.exitButton.configure(text='''Keluar''')

    def Exit(self):
        msg = messagebox.askyesno("Klasifikasi Gambar", "Apa Anda Yakin Ingin Keluar?")
        if(msg):
            exit()

    def run_caps(self):
        #folder = self.imgFolderText.get("1.0","end-1c")
        #modelfolder = self.saveModelText.get("1.0","end-1c")
        lr = self.lrText.get("1.0","end-1c")
        batch = self.batchText.get("1.0","end-1c")
        epoch = self.epochText.get("1.0","end-1c")
        step = self.stepText.get("1.0","end-1c")
        print([float(lr),int(batch)])
        run1 = new.caps_run(float(lr),int(batch),int(epoch),int(step))
        print("capsnet Selesai")
        fig_photo1 = new.plot_confusion_matrix(run1.confmat, classes=run1.labels,canvas=self.confMatCanvas)
        # self.confMatScrolledtext.configure(state='normal')
        # self.confMatScrolledtext.delete(1.0,tk.END)
        # self.confMatScrolledtext.insert(tk.INSERT,'KETERANGAN SAMPEL\n\n')
        # for i,j in zip(Counter(run1.y).keys(),Counter(run1.y).values()):
        #     self.confMatScrolledtext.insert(tk.INSERT,i+'\t: '+str(j)+'\n')
        self.confMatScrolledtext.configure(state='normal')
        self.confMatScrolledtext.delete(1.0,tk.END)
        self.confMatScrolledtext.insert(tk.INSERT,'jumlah\t: '+str(len(run1.y))+'\n')
        self.confMatScrolledtext.insert(tk.INSERT,'\nCONFUSION MATRIX SUMMARY\n\n')
        self.confMatScrolledtext.insert(tk.INSERT,str(run1.report))

# The following code is added to facilitate the Scrolled widgets you specified.
class AutoScroll(object):
    '''Configure the scrollbars for a widget.'''

    def __init__(self, master):
        #  Rozen. Added the try-except clauses so that this class
        #  could be used for scrolled entry widget for which vertical
        #  scrolling is not supported. 5/7/14.
        try:
            vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
        except:
            pass
        hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)

        #self.configure(yscrollcommand=_autoscroll(vsb),
        #    xscrollcommand=_autoscroll(hsb))
        try:
            self.configure(yscrollcommand=self._autoscroll(vsb))
        except:
            pass
        self.configure(xscrollcommand=self._autoscroll(hsb))

        self.grid(column=0, row=0, sticky='nsew')
        try:
            vsb.grid(column=1, row=0, sticky='ns')
        except:
            pass
        hsb.grid(column=0, row=1, sticky='ew')

        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)

        # Copy geometry methods of master  (taken from ScrolledText.py)
        if py3:
            methods = tk.Pack.__dict__.keys() | tk.Grid.__dict__.keys() \
                  | tk.Place.__dict__.keys()
        else:
            methods = tk.Pack.__dict__.keys() + tk.Grid.__dict__.keys() \
                  + tk.Place.__dict__.keys()

        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))

    @staticmethod
    def _autoscroll(sbar):
        '''Hide and show scrollbar as needed.'''
        def wrapped(first, last):
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            else:
                sbar.grid()
            sbar.set(first, last)
        return wrapped

    def __str__(self):
        return str(self.master)

def _create_container(func):
    '''Creates a ttk Frame with a given master, and use this new frame to
    place the scrollbars and the widget.'''
    def wrapped(cls, master, **kw):
        container = ttk.Frame(master)
        container.bind('<Enter>', lambda e: _bound_to_mousewheel(e, container))
        container.bind('<Leave>', lambda e: _unbound_to_mousewheel(e, container))
        return func(cls, container, **kw)
    return wrapped

class ScrolledText(AutoScroll, tk.Text):
    '''A standard Tkinter Text widget with scrollbars that will
    automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        tk.Text.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)

import platform
def _bound_to_mousewheel(event, widget):
    child = widget.winfo_children()[0]
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        child.bind_all('<MouseWheel>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-MouseWheel>', lambda e: _on_shiftmouse(e, child))
    else:
        child.bind_all('<Button-4>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Button-5>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-Button-4>', lambda e: _on_shiftmouse(e, child))
        child.bind_all('<Shift-Button-5>', lambda e: _on_shiftmouse(e, child))

def _unbound_to_mousewheel(event, widget):
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        widget.unbind_all('<MouseWheel>')
        widget.unbind_all('<Shift-MouseWheel>')
    else:
        widget.unbind_all('<Button-4>')
        widget.unbind_all('<Button-5>')
        widget.unbind_all('<Shift-Button-4>')
        widget.unbind_all('<Shift-Button-5>')

def _on_mousewheel(event, widget):
    if platform.system() == 'Windows':
        widget.yview_scroll(-1*int(event.delta/120),'units')
    elif platform.system() == 'Darwin':
        widget.yview_scroll(-1*int(event.delta),'units')
    else:
        if event.num == 4:
            widget.yview_scroll(-1, 'units')
        elif event.num == 5:
            widget.yview_scroll(1, 'units')

def _on_shiftmouse(event, widget):
    if platform.system() == 'Windows':
        widget.xview_scroll(-1*int(event.delta/120), 'units')
    elif platform.system() == 'Darwin':
        widget.xview_scroll(-1*int(event.delta), 'units')
    else:
        if event.num == 4:
            widget.xview_scroll(-1, 'units')
        elif event.num == 5:
            widget.xview_scroll(1, 'units')

if __name__ == '__main__':
    vp_start_gui()





